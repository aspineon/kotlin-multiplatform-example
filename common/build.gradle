plugins {
    id("kotlin-multiplatform")
}
repositories {
    mavenCentral()
}
kotlin {
    targets {
        jvm()
        fromPreset(presets.js, "js") {
            compileKotlinJs {
                kotlinOptions.metaInfo = true
                kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
                kotlinOptions.sourceMap = true
                kotlinOptions.moduleKind = "commonjs"
                kotlinOptions.main = "call"
            }
        }
        // This is for iPhone emulator
        // Switch here to iosArm64 (or iosArm32) to build library for iPhone device, rather than simulator
        iosX64("ios"){
            binaries {
                framework()
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
    }
}
// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'common.framework/**'
            include 'common.framework.dSYM'
        }
    }
}
